[settings]
  id = "test.pipeline.sql"
  lines = 1
  run = false
  buffer = 1_000

[[inputs]]
  [inputs.sql]
    enable_metrics = true
    driver = "pgx"
    dsn = "postgres://postgres:pguser@localhost:5432/postgres"
    interval = "2s"
    wait_for_delivery = true
    transactional = true
    [inputs.sql.keep_values]
      last = [ "insert_timestamp" ]
      all = [ "id" ]
    [inputs.sql.on_init]
      query = '''
SELECT INSERT_TIMESTAMP FROM POLLING_TABLE
WHERE POLLED_TIMESTAMP IS NULL
ORDER BY INSERT_TIMESTAMP ASC
LIMIT 1;
      '''
    [inputs.sql.on_poll]
      query = '''
SELECT ID, INSERT_TIMESTAMP, MESSAGE FROM POLLING_TABLE
WHERE POLLED_TIMESTAMP IS NULL
AND INSERT_TIMESTAMP >= :insert_timestamp
ORDER BY INSERT_TIMESTAMP ASC
LIMIT 200
FOR UPDATE SKIP LOCKED;
      '''
    [inputs.sql.on_done]
      query = '''
UPDATE POLLING_TABLE
SET POLLED_TIMESTAMP = now()
WHERE ID IN (:id)
AND INSERT_TIMESTAMP >= :insert_timestamp;
      '''

[[processors]]
  [processors.template]
    routing_key = '{{ .RoutingKey }}-{{ .Timestamp.Format "2006-01-02" }}'

[[outputs]]
  [outputs.log]
    level = "debug"
    [outputs.log.serializer]
      type = "json"
      data_only = false
