// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.0--rc2
// source: plugins/common/grpc/input.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InputClient is the client API for Input service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InputClient interface {
	SendBulk(ctx context.Context, opts ...grpc.CallOption) (Input_SendBulkClient, error)
	SendOne(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Nil, error)
	// planned for internal usage only
	// this method is used to stream data
	// from outputs.grpc to inputs.grpc
	OpenStream(ctx context.Context, opts ...grpc.CallOption) (Input_OpenStreamClient, error)
}

type inputClient struct {
	cc grpc.ClientConnInterface
}

func NewInputClient(cc grpc.ClientConnInterface) InputClient {
	return &inputClient{cc}
}

func (c *inputClient) SendBulk(ctx context.Context, opts ...grpc.CallOption) (Input_SendBulkClient, error) {
	stream, err := c.cc.NewStream(ctx, &Input_ServiceDesc.Streams[0], "/neptunus.plugins.common.grpc.Input/SendBulk", opts...)
	if err != nil {
		return nil, err
	}
	x := &inputSendBulkClient{stream}
	return x, nil
}

type Input_SendBulkClient interface {
	Send(*Event) error
	CloseAndRecv() (*BulkSummary, error)
	grpc.ClientStream
}

type inputSendBulkClient struct {
	grpc.ClientStream
}

func (x *inputSendBulkClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *inputSendBulkClient) CloseAndRecv() (*BulkSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BulkSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *inputClient) SendOne(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, "/neptunus.plugins.common.grpc.Input/SendOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inputClient) OpenStream(ctx context.Context, opts ...grpc.CallOption) (Input_OpenStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Input_ServiceDesc.Streams[1], "/neptunus.plugins.common.grpc.Input/OpenStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &inputOpenStreamClient{stream}
	return x, nil
}

type Input_OpenStreamClient interface {
	Send(*Event) error
	CloseAndRecv() (*Nil, error)
	grpc.ClientStream
}

type inputOpenStreamClient struct {
	grpc.ClientStream
}

func (x *inputOpenStreamClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *inputOpenStreamClient) CloseAndRecv() (*Nil, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Nil)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InputServer is the server API for Input service.
// All implementations must embed UnimplementedInputServer
// for forward compatibility
type InputServer interface {
	SendBulk(Input_SendBulkServer) error
	SendOne(context.Context, *Event) (*Nil, error)
	// planned for internal usage only
	// this method is used to stream data
	// from outputs.grpc to inputs.grpc
	OpenStream(Input_OpenStreamServer) error
	mustEmbedUnimplementedInputServer()
}

// UnimplementedInputServer must be embedded to have forward compatible implementations.
type UnimplementedInputServer struct {
}

func (UnimplementedInputServer) SendBulk(Input_SendBulkServer) error {
	return status.Errorf(codes.Unimplemented, "method SendBulk not implemented")
}
func (UnimplementedInputServer) SendOne(context.Context, *Event) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOne not implemented")
}
func (UnimplementedInputServer) OpenStream(Input_OpenStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenStream not implemented")
}
func (UnimplementedInputServer) mustEmbedUnimplementedInputServer() {}

// UnsafeInputServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InputServer will
// result in compilation errors.
type UnsafeInputServer interface {
	mustEmbedUnimplementedInputServer()
}

func RegisterInputServer(s grpc.ServiceRegistrar, srv InputServer) {
	s.RegisterService(&Input_ServiceDesc, srv)
}

func _Input_SendBulk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InputServer).SendBulk(&inputSendBulkServer{stream})
}

type Input_SendBulkServer interface {
	SendAndClose(*BulkSummary) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type inputSendBulkServer struct {
	grpc.ServerStream
}

func (x *inputSendBulkServer) SendAndClose(m *BulkSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *inputSendBulkServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Input_SendOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InputServer).SendOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neptunus.plugins.common.grpc.Input/SendOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InputServer).SendOne(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Input_OpenStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InputServer).OpenStream(&inputOpenStreamServer{stream})
}

type Input_OpenStreamServer interface {
	SendAndClose(*Nil) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type inputOpenStreamServer struct {
	grpc.ServerStream
}

func (x *inputOpenStreamServer) SendAndClose(m *Nil) error {
	return x.ServerStream.SendMsg(m)
}

func (x *inputOpenStreamServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Input_ServiceDesc is the grpc.ServiceDesc for Input service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Input_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "neptunus.plugins.common.grpc.Input",
	HandlerType: (*InputServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendOne",
			Handler:    _Input_SendOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendBulk",
			Handler:       _Input_SendBulk_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "OpenStream",
			Handler:       _Input_OpenStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "plugins/common/grpc/input.proto",
}
